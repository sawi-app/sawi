generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  oidcId      String       @id @unique
  firstName   String?
  middleName  String?
  lastName    String?
  gender      UserGender?
  birthDay    DateTime?
  email       String?
  phone       String?
  picture     String?
  userDevices UserDevice[]

  address        String?
  bio            String?
  nationality    String?
  socialFacebook String?
  socialLinkedin String?
  socialTwitter  String?
  website        String?
  organizations  UserOrganization[]
}

model Settings {
  key   String @id
  value Json
}

enum UserGender {
  Male
  Female
}

model UserOrganization {
  idOrg        String
  role         OrganizationRole
  userId       String
  organization Organization     @relation(fields: [idOrg], references: [id])
  user         User             @relation(fields: [userId], references: [oidcId])

  @@id([idOrg, userId])
}

enum OrganizationRole {
  SUPER_ADMIN
  MANAGER
  USER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Address {
  id      String  @id
  referTo String
  street  String?
  street2 String?
  city    String?
  state   String?
  zipCode String?
  country String?
  lat     String?
  lng     String?
}

model Organization {
  id                   String                @id
  reference            String
  name                 String?
  logo                 String?
  commercialRegister   String?
  taxIdNumber          String?
  customsCode          String?
  phones               String[]
  establishments       Establishment[]
  deposits             Deposit[]
  locations            Location[]
  contactTypes         ContactType[]
  banks                Bank[]
  bankAccounts         BankAccount[]
  taxes                Tax[]
  vats                 Vat[]
  currencies           Currency[]
  currencyCoefficients CurrencyCoefficient[]
  discounts            Discount[]
  contacts             Contact[]
  providers            Provider[]
  clients              Client[]
  categories           Category[]
  units                Unit[]
  unitCoefficients     UnitCoefficient[]
  articles             Article[]
  variantProps         VariantProps[]
  lotCompositions      LotComposition[]
  stockpiles           Stockpile[]
  organizations        UserOrganization[]
  operations           Operation[]
  commercialDocs       CommercialDoc[]
  phases               Phase[]
  transitions          Transition[]
  headers              Header[]
  movements            Movement[]
  pricing              Pricing[]
  pointings            Pointing[]
  projects             Project[]
  emplyees             Employee[]
}

model Establishment {
  id                   String                @id
  idOrg                String                @map("idOrg")
  reference            String                @unique
  designation          String?
  currency             String?
  organization         Organization          @relation(fields: [idOrg], references: [id])
  deposits             Deposit[]
  locations            Location[]
  contactTypes         ContactType[]
  bankAccounts         BankAccount[]
  taxes                Tax[]
  vats                 Vat[]
  currencies           Currency[]
  currencyCoefficients CurrencyCoefficient[]
  discounts            Discount[]
  contacts             Contact[]
  providers            Provider[]
  clients              Client[]
  categories           Category[]
  units                Unit[]
  unitCoefficients     UnitCoefficient[]
  articles             Article[]
  variantProps         VariantProps[]
  lotCompositions      LotComposition[]
  stockpiles           Stockpile[]
  operations           Operation[]
  commercialDoc        CommercialDoc[]
  phase                Phase[]
  transition           Transition[]
  headers              Header[]
  movements            Movement[]
  pricing              Pricing[]
  projects             Project[]
  pointing             Pointing[]
  emplyees             Employee[]
}

model Deposit {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  reference     String        @unique
  designation   String?
  type          DepositType
  media         String?
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  locations     Location[]
  stockpiles    Stockpile[]
}

enum DepositType {
  WAREHOUSE
  STORE
  SHOWROOM
  OTHER
}

model Location {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  idDepo        String        @map("idDepo")
  reference     String        @unique
  designation   String?
  volume        String?
  media         String?
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  deposit       Deposit       @relation(fields: [idDepo], references: [id])
  stockpiles    Stockpile[]
}

model ContactType {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  reference     String        @unique
  designation   String?
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  contacts      Contact[]
}

model Bank {
  id           String        @id
  idOrg        String        @map("idOrg")
  reference    String        @unique
  designation  String?
  organization Organization  @relation(fields: [idOrg], references: [id])
  bankAccounts BankAccount[]
}

model BankAccount {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  idBank        String        @map("idBank")
  reference     String        @unique
  RIB           String
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  bank          Bank          @relation(fields: [idBank], references: [id])
  contacts      Contact[]
  providers     Provider[]
  clients       Client[]
}

model Tax {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  reference     String        @unique
  designation   String?
  value         Float?
  taxType       String?
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  providers     Provider[]
  clients       Client[]
  headers       Header[]
  movements     Movement[]
  pricing       Pricing[]
}

model Vat {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  reference     String        @unique
  designation   String?
  value         Float?
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  contacts      Contact[]
  providers     Provider[]
  clients       Client[]
  headers       Header[]
  movements     Movement[]
  pricing       Pricing[]
}

model Currency {
  id                       String                @id
  idOrg                    String                @map("idOrg")
  idEtb                    String                @map("idEtb")
  reference                String                @unique
  designation              String?
  symbol                   String?
  organization             Organization          @relation(fields: [idOrg], references: [id])
  establishment            Establishment         @relation(fields: [idEtb], references: [id])
  currencyCoefficientsFrom CurrencyCoefficient[] @relation("CurrencyFrom")
  currencyCoefficientsTo   CurrencyCoefficient[] @relation("CurrencyTo")
}

model CurrencyCoefficient {
  id             String        @id
  idOrg          String        @map("idOrg")
  idEtb          String        @map("idEtb")
  reference      String        @unique
  designation    String?
  value          Float?
  idCurrencyFrom String        @map("idCurrencyFrom")
  idCurrencyTo   String        @map("idCurrencyTo")
  organization   Organization  @relation(fields: [idOrg], references: [id])
  establishment  Establishment @relation(fields: [idEtb], references: [id])
  currencyFrom   Currency      @relation("CurrencyFrom", fields: [idCurrencyFrom], references: [id])
  currencyTo     Currency      @relation("CurrencyTo", fields: [idCurrencyTo], references: [id])
}

model Discount {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  reference     String        @unique
  designation   String?
  value         Float?
  effectDate    DateTime
  endDate       DateTime
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
}

model Contact {
  id             String        @id
  idOrg          String        @map("idOrg")
  idEtb          String        @map("idEtb")
  idTypeContact  String        @map("idTypeContact")
  idVat          String        @map("idVat")
  idBankAccount  String        @map("idBankAccount")
  reference      String        @unique
  firstName      String?
  lastName       String?
  companyName    String?
  email          String?
  tel            String?
  personalIdType String?
  personalId     String?
  taxIdNumber    String?
  customsCode    String?
  nature         Nature
  headers        Header[]
  organization   Organization  @relation(fields: [idOrg], references: [id])
  establishment  Establishment @relation(fields: [idEtb], references: [id])
  contactType    ContactType   @relation(fields: [idTypeContact], references: [id])
  vat            Vat           @relation(fields: [idVat], references: [id])
  bankAccount    BankAccount   @relation(fields: [idBankAccount], references: [id])
}

model Provider {
  id             String        @id
  idOrg          String        @map("idOrg")
  idEtb          String        @map("idEtb")
  idVat          String        @map("idVat")
  idTax          String        @map("idTax")
  idBankAccount  String        @map("idBankAccount")
  reference      String        @unique
  firstName      String?
  lastName       String?
  companyName    String?
  email          String?
  tel            String?
  personalIdType String?
  personalId     String?
  taxIdNumber    String?
  customsCode    String?
  nature         Nature
  headers        Header[]
  organization   Organization  @relation(fields: [idOrg], references: [id])
  establishment  Establishment @relation(fields: [idEtb], references: [id])
  vat            Vat           @relation(fields: [idVat], references: [id])
  tax            Tax           @relation(fields: [idTax], references: [id])
  bankAccount    BankAccount   @relation(fields: [idBankAccount], references: [id])
}

model Client {
  id             String        @id
  idOrg          String        @map("idOrg")
  idEtb          String        @map("idEtb")
  idVat          String?       @map("idVat")
  idTax          String?       @map("idTax")
  idBankAccount  String?       @map("idBankAccount")
  reference      String        @unique
  firstName      String?
  lastName       String?
  companyName    String?
  email          String?
  tel            String?
  personalIdType String?
  personalId     String?
  taxIdNumber    String?
  customsCode    String?
  note           String?
  nature         Nature
  headers        Header[]
  organization   Organization   @relation(fields: [idOrg], references: [id])
  establishment  Establishment  @relation(fields: [idEtb], references: [id])
  vat            Vat?           @relation(fields: [idVat], references: [id])
  tax            Tax?           @relation(fields: [idTax], references: [id])
  bankAccount    BankAccount?   @relation(fields: [idBankAccount], references: [id])
}

enum Nature {
  COMPANY
  INDIVIDUAL
}

model Category {
  id              String        @id
  idOrg           String        @map("idOrg")
  idEtb           String        @map("idEtb")
  idParent        String?
  reference       String        @unique
  designation     String?
  isSubCategory   Boolean?      @default(false)
  organization    Organization  @relation(fields: [idOrg], references: [id])
  establishment   Establishment @relation(fields: [idEtb], references: [id])
  parent          Category?     @relation("ChildCategories", fields: [idParent], references: [id])
  childCategories Category[]    @relation("ChildCategories")
  articles        Article[]
}

model Unit {
  id                   String            @id
  idOrg                String            @map("idOrg")
  idEtb                String            @map("idEtb")
  reference            String            @unique
  designation          String?
  organization         Organization      @relation(fields: [idOrg], references: [id])
  establishment        Establishment     @relation(fields: [idEtb], references: [id])
  unitCoefficientsFrom UnitCoefficient[] @relation("UnitCoefficientsFrom")
  unitCoefficientsTo   UnitCoefficient[] @relation("UnitCoefficientsTo")
  articlesSold         Article[]         @relation("ArticlesSold")
  articlesPurchased    Article[]         @relation("ArticlesPurchased")
  movements            Movement[]
}

model UnitCoefficient {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  reference     String        @unique
  designation   String?
  unitFrom      String        @map("unitFrom")
  unitTo        String        @map("unitTo")
  value         Float
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  unit_from     Unit          @relation("UnitCoefficientsFrom", fields: [unitFrom], references: [id])
  unit_to       Unit          @relation("UnitCoefficientsTo", fields: [unitTo], references: [id])
}

model Article {
  id                String            @id
  idOrg             String            @map("idOrg")
  idEtb             String            @map("idEtb")
  idCategory        String            @map("idCategory")
  idSubArticle      String?
  isSubArticle      Boolean           @default(false)
  reference         String            @unique
  designation       String?
  EAN               String?
  serialNumber      String?
  saleUnit          String?            @map("saleUnit")
  purchaseUnit      String?            @map("purchaseUnit")
  buySell           BuySell[]
  picking           Picking
  isService         Boolean       @default(false)
  stockManagement   StockManagement
  volume            String?
  weight            Float?
  articleManagement ArticleManagement
  media             String?

  organization    Organization     @relation(fields: [idOrg], references: [id])
  establishment   Establishment    @relation(fields: [idEtb], references: [id])
  category        Category         @relation(fields: [idCategory], references: [id])
  sale_unit       Unit?             @relation("ArticlesSold", fields: [saleUnit], references: [id])
  purchase_unit   Unit?             @relation("ArticlesPurchased", fields: [purchaseUnit], references: [id])
  subArticleProps VariantProps[]
  lotCompositions LotComposition[]
  stockpiles      Stockpile[]
  pricing         Pricing[]
}

enum BuySell {
  CAN_BE_PURCHASED
  CAN_BE_SOLD
  CAN_BE_MANUFACTURED
}

enum Picking {
  FIFO
  LIFO
  FEFO
}

enum StockManagement {
  IN_STOCK
  OUT_OF_STOCK
}

enum ArticleManagement {
  BY_LOT
  BY_SERIAL_NUMBER
  BY_EAN
}

model VariantProps {
  id           String      @id
  idOrg        String      @map("idOrg")
  idEtb        String      @map("idEtb")
  idSubArticle String      @map("idSubArticle")
  reference    String      @unique
  designation  String?
  type         VariantType
  value        String

  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  subArticle    Article       @relation(fields: [idSubArticle], references: [id])
}

enum VariantType {
  COLOR
  SIZE
  NUMBER
  TEXT
}

model LotComposition {
  id          String  @id
  idOrg       String  @map("idOrg")
  idEtb       String  @map("idEtb")
  idComposant String  @map("idComposant")
  reference   String  @unique
  designation String?

  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  composant     Article       @relation(fields: [idComposant], references: [id])
}

model Stockpile {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  idDeposit     String        @map("idDeposit")
  idLocation    String        @map("idLocation")
  idArticle     String        @map("idArticle")
  qtyReal       Float?
  qtyVirtual    Float?
  qtyReserved   Float?
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  deposit       Deposit       @relation(fields: [idDeposit], references: [id])
  location      Location      @relation(fields: [idLocation], references: [id])
  article       Article       @relation(fields: [idArticle], references: [id])
}

model Pricing {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  idArticle     String        @map("idArticle")
  idTax         String?       @map("idTax")
  idVat         String?       @map("idVat")
  purshasePrice Float?
  salePrice     Float
  costPrice     Float?
  startDate     DateTime?
  endDate       DateTime?
  CUMP          Float?
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  article       Article       @relation(fields: [idArticle], references: [id])
  tax           Tax?          @relation(fields: [idTax], references: [id])
  vat           Vat?          @relation(fields: [idVat], references: [id])
}

model Operation {
  id             String           @id
  idOrg          String           @map("idOrg")
  idEtb          String           @map("idEtb")
  codeOperation  String           @unique
  designation    String?
  virtualAction  OperationAction?
  realAction     OperationAction?
  reservedAction OperationAction?
  transition     Transition[]
  headers        Header[]
  movements      Movement[]
  organization   Organization     @relation(fields: [idOrg], references: [id])
  establishment  Establishment    @relation(fields: [idEtb], references: [id])
}

enum OperationAction {
  ADD
  MINUS
  UNCHANGED
}

model CommercialDoc {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  reference     String        @unique
  designation   String?
  transition    Transition[]
  headers       Header[]
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
}

model Phase {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  reference     String        @unique
  designation   String?
  relatedType   String?
  transition    Transition[]
  headers       Header[]
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
}

model Transition {
  id              String        @id
  idOrg           String        @map("idOrg")
  idEtb           String        @map("idEtb")
  idOperation     String        @map("idOperation")
  idCommercialDoc String        @map("idCommercialDoc")
  idPhase         String        @map("idPhase")
  reference       String        @unique
  designation     String?
  organization    Organization  @relation(fields: [idOrg], references: [id])
  establishment   Establishment @relation(fields: [idEtb], references: [id])
  operation       Operation     @relation(fields: [idOperation], references: [id])
  commercialDoc   CommercialDoc @relation(fields: [idCommercialDoc], references: [id])
  phase           Phase         @relation(fields: [idPhase], references: [id])
}

model Header {
  id              String        @id
  idOrg           String        @map("idOrg")
  idEtb           String        @map("idEtb")
  idClient        String?       @map("idClient")
  idProvider      String?       @map("idProvider")
  idContact       String?       @map("idContact")
  idOperation     String        @map("idOperation")
  idCommercialDoc String        @map("idCommercialDoc")
  idPhase         String        @map("idPhase")
  idTax           String?       @map("idTax")
  idVat           String?       @map("idVat")
  reference       String        @unique
  untaxedAmount   Float
  taxedAmount     Float
  headerGroup     String
  organization    Organization  @relation(fields: [idOrg], references: [id])
  establishment   Establishment @relation(fields: [idEtb], references: [id])
  provider        Provider?     @relation(fields: [idProvider], references: [id])
  client          Client?       @relation(fields: [idClient], references: [id])
  contact         Contact?      @relation(fields: [idContact], references: [id])
  operation       Operation     @relation(fields: [idOperation], references: [id])
  commercialDoc   CommercialDoc @relation(fields: [idCommercialDoc], references: [id])
  phase           Phase         @relation(fields: [idPhase], references: [id])
  tax             Tax?          @relation(fields: [idTax], references: [id])
  vat             Vat?          @relation(fields: [idVat], references: [id])
}

model Movement {
  id            String        @id
  idOrg         String        @map("idOrg")
  idEtb         String        @map("idEtb")
  idHeader      String        @map("idHeader")
  idArticle     String        @map("idArticle")
  qty           Float
  idUnit        String        @map("idUnit")
  idTax         String?       @map("idTax")
  idVat         String?       @map("idVat")
  untaxedAmount Float
  taxedAmount   Float
  idOperation   String        @map("idOperation")
  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  operation     Operation     @relation(fields: [idOperation], references: [id])
  unit          Unit          @relation(fields: [idUnit], references: [id])
  tax           Tax?          @relation(fields: [idTax], references: [id])
  vat           Vat?          @relation(fields: [idVat], references: [id])
}

model UserDevice {
  id     String @unique
  User   User   @relation(fields: [userId], references: [oidcId])
  userId String
  token  String @unique
  ua     Json?

  @@id([userId, token])
}

enum ScopeType {
  USER
  CHIEF
  EMPLOYEE
  ORG
  ESTABLISHMENT
}

enum NotifAction {
  OTHER
}

model Notifications {
  id String @id @unique

  senderScope   ScopeType?
  senderScopeId String?

  receiverScope   ScopeType @default(USER)
  receiverScopeId String

  t      DateTime    @default(now())
  isRead Boolean     @default(false)
  icon   String?
  action NotifAction @default(OTHER)
  body   Json?
  title  String?
  link   String?
}

// ------------------------------------- Pointing

model Project {
  id            String         @id @unique
  idOrg         String         @map("idOrg")
  idEtb         String         @map("idEtb")
  name          String
  address       String?
  description   String?
  startDate     DateTime?
  endDate       DateTime?
  status        ProjectStatus?
  coordinateGPS String?
  isDeleted     Boolean        @default(false)

  organization  Organization  @relation(fields: [idOrg], references: [id])
  establishment Establishment @relation(fields: [idEtb], references: [id])
  pointings     Pointing[]
  employees     Employee[]
}

enum ProjectRole {
  EMPLOYEE
  CHEIF
  ADMIN
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  FINISHED
}

model Employee {
  id           String        @id @unique
  idOrg        String        @map("idOrg")
  idEtb        String        @map("idEtb")
  firstName    String?
  lastName     String?
  email        String?       @unique
  tel1         String
  tel2         String?
  BirthDay     DateTime?
  address      String?
  nationality  String?
  post         String?
  comment      String?
  salary       Float?
  cinPassp     String?
  cnss         String?
  isDeleted    Boolean       @default(false)
  isDeclared   Boolean       @default(false)
  createdBy    String?
  deletedBy    String?
  createdAt    DateTime?     @default(now())
  deletedAt    DateTime?
  isFamilyHead Boolean       @default(false)
  kids         Int?          @default(0)
  familyStatus FamilyStatus?

  idProject    String?
  organization  Organization?  @relation(fields: [idOrg], references: [id])
  establishment Establishment? @relation(fields: [idEtb], references: [id])
  project       Project?       @relation(fields: [idProject], references: [id])
  pointings     Pointing[]
}

enum FamilyStatus {
  SINGLE
  MARRIED
  DIVORCED
}

model Pointing {
  id         String   @id @unique
  idOrg      String
  idEtb      String
  idProject  String
  idEmployee String
  date       DateTime
  note       String?
  salary     Float?
  deposit    Float?   @default(0)
  hours      WorkDay  @default(FULL)
  extraHours Float    @default(0)

  organization  Organization?  @relation(fields: [idOrg], references: [id])
  establishment Establishment? @relation(fields: [idEtb], references: [id])
  project       Project        @relation(fields: [idProject], references: [id])
  employee      Employee       @relation(fields: [idEmployee], references: [id], onDelete: Restrict)
}

enum WorkDay {
  FULL
  HALF
  NONE
}
